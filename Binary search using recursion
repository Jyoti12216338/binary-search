#include <iostream>
#include <vector>

using namespace std;

// Function to perform binary search recursively
int binarySearchRecursive(vector<int> &arr, int left, int right, int target) {
    if (left <= right) {
        int mid = left + (right - left) / 2;

        // If the element is present at the middle itself
        if (arr[mid] == target)
            return mid;

        // If the element is smaller than mid, then it can only be present in left subarray
        if (arr[mid] > target)
            return binarySearchRecursive(arr, left, mid - 1, target);

        // Else the element can only be present in right subarray
        return binarySearchRecursive(arr, mid + 1, right, target);
    }

    // Element is not present in the array
    return -1;
}

int main() {
    vector<int> arr = {2, 3, 4, 10, 40};
    int target = 10;
    int n = arr.size();

    int result = binarySearchRecursive(arr, 0, n - 1, target);
    if (result == -1)
        cout << "Element is not present in array";
    else
        cout << "Element is present at index " << result;

    return 0;
}
